# vim:nowrap:
#####################################
# Fonts
# [Nerd Fonts](https://www.nerdfonts.com)
# [Programming Fonts](https://www.programmingfonts.org)

# [Command Line](https://www.reddit.com/r/commandline/)
# [A list of new(ish) command line tools](https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/)



function extend_bashrc {
   cat >> $HOME/.bashrc <<EOL


# User specific aliases and functions
[[ -e ~/.alias ]] && . ~/.alias || true
[[ -e ~/.bashrc.common ]] && . ~/.bashrc.common || true
[[ -e ~/.bashrc.specific ]] && . ~/.bashrc.specific || true
[[ -d ~/.bash_completion.d ]] && for f in ~/.bash_completion.d/*; do source \$f; done || true
EOL
}



function install_configs {
   local -ar configs=(
     alias
     bashrc.common
     gdbinit
     gitconfig
     gitignore_global
     inputrc
     screenrc
     tmux.conf
     toprc
     vimrc
   )

   for config in ${configs[@]}; do
      ln -fns ~/config/$config  ~/.$config
   done

   mkdir -p ~/.config/htop
   ln -fns ~/config/htoprc ~/.config/htop/

   ln -fns ~/config/flake8 ~/.config/flake8

   mkdir -p ~/.cargo
   ln -fns ~/config/cargo.config.toml ~/.cargo/config.toml
}



function install_vim_plugins {
   git \
      clone \
      https://github.com/VundleVim/Vundle.vim.git \
      $HOME/.vim/bundle/Vundle.vim
   vim +:PluginInstall +:qa
}



function install_tmux_plugins {
   git \
      clone \
      https://github.com/tmux-plugins/tpm \
      $HOME/.tmux/plugins/tpm
}



function install_python_tools {
   # [bpytop - GitHub](https://github.com/aristocratos/bpytop)
   python3 -m pip install --user bpytop

   # [glances - GitHub](https://github.com/nicolargo/glances)
   # [glances - WebSite](https://nicolargo.github.io/glances):
   # An eye on your system.
   python3 -m pip install --user --upgrade glances

   # [tabulate - python-tabulate - GitHub](https://github.com/astanin/python-tabulate):
   # Pretty-print tabular data in Python, a library and a command-line utility.
   python3 -m pip install --user --upgrade tabulate

   # [tqdm - GitHub](https://github.com/tqdm/tqdm):
   # Progress Bar.
   python3 -m pip install --user --upgrade tqdm

   # [histogram.py - GitHub](https://github.com/bitly/data_hacks):
   # Command line utilities for data analysis.
   #python3 -m pip install --user --upgrade data_hacks   # Only works with python2
   python3 -m pip install --user --upgrade data_hacks3

   # [tmuxp - GitHub](https://github.com/tmux-python/tmuxp):
   # tmuxp, tmux session manager.
   python3 -m pip install --user --upgrade tmuxp

   # [tldr-pages - GitHub](https://github.com/tldr-pages/tldr):
   # The tldr-pages project is a collection of community-maintained help pages
   # for command-line tools, that aims to be a simpler, more approachable
   # complement to traditional man pages.
   python3 -m pip install --user --upgrade tldr

   # [Rich CLI - GitHub](https://github.com/Textualize/rich-cli):
   # Rich-cli is a command line toolbox for fancy output in the terminal, built
   # with Rich.  Use the rich command to highlight a variety of file types in
   # the terminal, with specialized rendering for Markdown and JSON files.
   # Additionally you can markup and format text from the command line.
   python3 -m pip install --user --upgrade rich-cli

   # [xq - GitHub](https://github.com/jeffbr13/xq):
   # Apply XPath expressions to XML, like jq does for JSONPath and JSON.
   python3 -m pip install --user --upgrade xq

   # [hq - GitHub](https://github.com/rbwinslow/hq):
   # Powerful HTML slicing and dicing at the command line.
   python3 -m pip install --user --upgrade hq

   # [yq - GitHub](https://github.com/kislyuk/yq):
   # yq: Command-line YAML/XML/TOML processor - jq wrapper for YAML, XML, TOML documents.
   python3 -m pip install --user --upgrade yq
}



function install_go_tools {
   # [go](https://golang.org/): Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.
   # wget 'https://golang.org/dl/go1.17.3.linux-amd64.tar.gz'
   # wget 'https://go.dev/dl/go1.17.5.linux-armv6l.tar.gz'

   # [fzf - GitHub](https://github.com/junegunn/fzf): fzf is a general-purpose.
   # command-line fuzzy finder
   go install github.com/junegunn/fzf@latest \
   && mv ~/go/bin/fzf ~/.local/bin/
   mkdir -p ~/.bash_completion.d
   wget -O ~/.bash_completion.d/fzf.completion.bash 'https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.bash'
   wget -O ~/.bash_completion.d/fzf.key-bindings.bash 'https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.bash'
   mkdir -p ~/.config/fish/functions
   wget -O ~/.config/fish/functions/fzf_key_bindings.fish 'https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.fish'

   # [lazygit - GitHub](https://github.com/jesseduffield/lazygit): A simple
   # terminal UI for git commands, written in Go with the gocui library.
   go install github.com/jesseduffield/lazygit@latest \
   && mv ~/go/bin/lazygit ~/.local/bin/

   # [lazydocker - GitHub](https://github.com/jesseduffield/lazydocker): A
   # simple terminal UI for both docker and docker-compose, written in Go with
   # the gocui library.
   go install github.com/jesseduffield/lazydocker@latest \
   && mv ~/go/bin/lazydocker ~/.local/bin/

   # [go DiskUsage(gdu) - GitHub](https://github.com/dundee/gdu): Pretty fast
   # disk usage analyzer written in Go.
   go install github.com/dundee/gdu/v5/cmd/gdu@latest \
   && mv ~/go/bin/gdu ~/.local/bin/

   # [duf - GitHub](https://github.com/muesli/duf: Disk Usage/Free Utility
   # (Linux, BSD, macOS & Windows)).
   go install github.com/muesli/duf@latest \
   && mv ~/go/bin/duf ~/.local/bin/

   # [F2 - GitHub](https://github.com/ayoisaiah/f2): F2 is a cross-platform
   # command-line tool for batch renaming files and directories quickly and
   # safely. Written in Go!
   go install github.com/ayoisaiah/f2/cmd/f2@latest \
   && mv ~/go/bin/f2 ~/.local/bin/

   # [yq - gitHub](https://github.com/mikefarah/yq)
   # a lightweight and portable command-line YAML, JSON and XML processor. yq
   # uses jq like syntax but works with yaml files as well as json and xml.
   #go install github.com/mikefarah/yq@latest \
   go get github.com/mikefarah/yq/v4 \
   && mv ~/go/bin/yq ~/.local/bin/

   # [Glow - GitHub](https://github.com/charmbracelet/glow)
   # Render markdown on the CLI, with pizzazz!
   go install github.com/charmbracelet/glow@latest \
   && mv ~/go/bin/glow ~/.local/bin/

   # [gojq - GitHub](Pure Go implementation of jq)
   # Pure Go implementation of jq.
   # This is an implementation of jq command written in Go language. You can
   # also embed gojq as a library to your Go products.
   go install github.com/itchyny/gojq/cmd/gojq@latest \
   && mv ~/go/bin/gojq ~/.local/bin/

   # [Miller - GitHub](https://github.com/johnkerl/miller):
   # Miller is like awk, sed, cut, join, and sort for data formats such as CSV,
   # TSV, JSON, JSON Lines, and positionally-indexed.
   #go install github.com/johnkerl/miller@latest \
   #&& mv ~/go/bin/mlr ~/.local/bin/
}


function install_rust_tools {
   # [Rust](https://www.rust-lang.org/): A language empowering everyone to build reliable and efficient software.
   # rust: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

   # [lsd (LSDeluxe) - GitHub](https://github.com/Peltoche/lsd): This project
   # is a rewrite of GNU ls with lot of added features like colors, icons,
   # tree-view, more formatting options etc. The project is heavily inspired by
   # the super colorls project.
   cargo install --root ~/.local lsd

   # [bat - GitHub](https://github.com/sharkdp/bat): A cat(1) clone with syntax
   # highlighting and Git integration.
   cargo install --root ~/.local bat

   # [hyperfine - GitHub](https://github.com/sharkdp/hyperfine): A command-line
   # benchmarking tool.
   cargo install --root ~/.local hyperfine

   # [exa - Documentation](https://the.exa.website/): modern replacement for ls.
   # [exa - GitHub](https://github.com/ogham/exa): modern replacement for ls.
   cargo install --root ~/.local exa

   # [zenith - GitHub](https://github.com/bvaisvil/zenith): In terminal
   # graphical metrics for your *nix system written in Rust.
   cargo install --root ~/.local --git https://github.com/bvaisvil/zenith

   # [dust: du + rust = dust - GitHub](https://github.com/bootandy/dust): Like
   # du but more intuitive.
   cargo install --root ~/.local --git https://github.com/bootandy/dust

   # [ytop - GitHub](https://github.com/cjbassi/ytop): Another TUI based system monitor, this time in Rust
   # NO LONGER MAINTAINED. For a similar program, check out [bottom](https://github.com/ClementTsang/bottom).
   #cargo install --git https://github.com/cjbassi/ytop
   cargo install --root ~/.local ytop

   # [procs - GitHub](https://github.com/dalance/procs): is a replacement for ps written in Rust.
   cargo install --root ~/.local procs

   # [fd - GitHub](https://github.com/sharkdp/fd): is a program to find entries in your filesystem.
   cargo install --root ~/.local fd-find

   # [rg: ripgrep - GitHub](https://github.com/BurntSushi/ripgrep): ripgrep is
   # a line-oriented search tool that recursively searches the current
   # directory for a regex pattern.
   cargo install --root ~/.local ripgrep

   # [RnR - GitHub](https://github.com/ismaelgv/rnr):
   # RnR is a command-line tool to securely rename multiple files and
   # directories that supports regular expressions.
   cargo install --root ~/.local rnr

   # [runiq - GitHub](https://github.com/whitfin/runiq):
   # This project offers an efficient way (in both time and space) to filter
   # duplicate entries (lines) from texual input.
   #cargo install --root ~/.local runiq

   # [histo - GitHub](https://github.com/fitzgen/histo)
   # Histograms with a configurable number of buckets, and a terminal-friendly
   # Display.
   #cargo install --root ~/.local histo

   # [Diskonaut - GitHub](https://github.com/imsnif/diskonaut):
   # windirstat like for the CLI.
   cargo install --root ~/.local diskonaut
}


function install_bash_tools {
   # [z - GitHub](https://github.com/rupa/z): jump around.
   mkdir -p ~/.bash_completion.d
   wget -O ~/.bash_completion.d/z.sh 'https://raw.githubusercontent.com/rupa/z/master/z.sh'

   # [fz - GitHub](https://github.com/changyuheng/fz): A shell plugin that
   # seamlessly adds fuzzy search to tab completion of z, lets you easy to jump
   # around among your historical directories.
   mkdir -p ~/.bash_completion.d
   curl "https://raw.githubusercontent.com/rupa/z/master/{z.sh}" -o ~/.bash_completion.d/"#1"
   curl "https://raw.githubusercontent.com/changyuheng/fz/master/{fz.sh}" -o ~/.bash_completion.d/z"#1"
}



function install_perl_tools {
   # [rename - Cpan File::Rename](https://metacpan.org/dist/File-Rename/view/rename.PL).
   cpan install File::Rename
}



function install_compiled_tools {
   # tmux

   # [htop - GitHub](https://github.com/htop-dev/htop): is a cross-platform
   # interactive process viewer.
   which --skip-alias htop \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget -O 'htop-3.1.1.tar.gz' 'https://github.com/htop-dev/htop/archive/refs/tags/3.1.1.tar.gz'
      tar xf htop-3.1.1.tar.gz
      cd htop-3.1.1
      ./autogen.sh
      ./configure --prefix $HOME/.local
      make -j $(nproc) install
      cd ..
      rm -fr htop-3.1.1
   )

   # [tig - GitHub](https:://github.com/jonas/tig): text-mode interface for Git.
   which --skip-alias tig \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget 'https://github.com/jonas/tig/archive/refs/tags/tig-2.5.4.tar.gz'
      tar xf tig-2.5.4.tar.gz
      cd tig-tig-2.5.4/
      ./autogen.sh
      ./configure --prefix $HOME/.local
      make -j $(nproc) install
      mkdir -p ~/.bash_completion.d/
      cp contrib/tig-completion.bash ~/.bash_completion.d/
      mkdir -p /.config/tig
      cp contrib/chocolate.theme.tigrc ~/.config/tig
      cd ..
      rm -fr tig-tig-2.5.4
      curl -o ~/.config/tig/"#1" "https://raw.githubusercontent.com/h3xx/tig-colors-neonwolf/main/{tig-colors-neonwolf-256.tigrc}"
   )

   # [parallel - GNU parallel](https://www.gnu.org/software/parallel/): is a shell tool
   # for executing jobs in parallel using one or more computers.
   which --skip-alias parallel \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget 'https://ftp.gnu.org/gnu/parallel/parallel-20211022.tar.bz2'
      tar xf parallel-20211022.tar.bz2
      cd parallel-20211022
      ./configure --prefix $HOME/.local
      make -j $(nproc) install
      cd ..
      rm -fr parallel-20211022
   )

   # [jq](https://stedolan.github.io/jq/): jq is a lightweight and flexible command-line JSON processor.
   # [jq](https://github.com/stedolan/jq): jq is a lightweight and flexible command-line JSON processor.
   which --skip-alias jq \
   || (
      wget -O "$HOME/.local/bin/jq" 'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64' \
      && chmod u+x $HOME/.local/bin/jq
   )
   #which --skip-alias jq \
   #|| (
   #   mkdir -p ~/tmp && cd ~/tmp
   #   wget 'https://github.com/stedolan/jq/archive/refs/tags/jq-1.6.tar.gz'
   #   cd jq-jq-1.6
   #   autoreconf -fi
   #   ./configure --with-oniguruma=builtin --prefix $HOME/.local
   #   make -j $(nproc) LDFLAGS=-all-static
   #)

   # [ncdu](https://dev.yorhel.nl/ncdu): NCurses Disk Usage.
   which --skip-alias ncdu \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget --no-check-certificate 'https://dev.yorhel.nl/download/ncdu-1.16.tar.gz'
      tar xf ncdu-1.16.tar.gz
      cd ncdu-1.16
      ./configure --prefix $HOME/.local
      make -j $(nproc) install
      cd ..
      rm -fr ncdu-1.16
   )

   # [FishShell](https://fishshell.com/): Finally, a command line shell for the
   # 90s fish is a smart and user-friendly command line shell for Linux, macOS,
   # and the rest of the family.
   # [fish - GitHub](https://github.com/fish-shell/fish-shell/): the friendly interactive shell.
   which --skip-alias fish \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget 'https://github.com/fish-shell/fish-shell/releases/download/3.3.1/fish-3.3.1.tar.xz'
      tar xf fish-3.3.1.tar.xz
      cd fish-3.3.1
      mkdir -p build && cd build
      cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local ..
      make -j $(nproc) insall
      cd ../.. && rm -fr fish-3.3.1
   )

   # [duf - GitHub](https://github.com/muesli/duf: Disk Usage/Free Utility (Linux, BSD, macOS & Windows)).
   which --skip-alias duf \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      git clone https://github.com/muesli/duf.git
      cd duf
      go build
      install --mode=u=rx duf $HOME/.local/bin
      cd .. && rm -fr duf
   )

   # [ug/ugrep - GitHub](https://github.com/Genivia/ugrep): Search for anything
   # in everything... ultra fast.
   which --skip-alias ugrep \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget -O ugrep-3.3.10.tar.gz https://github.com/Genivia/ugrep/archive/refs/tags/v3.3.10.tar.gz
      tar xf ugrep-3.3.10.tar.gz
      cd ugrep-3.3.10
      ./configure --prefix $HOME/.local --without-zstd
      \make -j $(nproc) install
      cd .. && rm -fr ugrep-3.3.10
   )

   # [hyperfine - GitHub](https://github.com/sharkdp/hyperfine): A command-line benchmarking tool.
   # NOTE: probably already install by `cargo install hyperfine`.
   which --skip-alias hyperfine \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget https://github.com/sharkdp/hyperfine/releases/download/v1.12.0/hyperfine-v1.12.0-x86_64-unknown-linux-musl.tar.gz
      tar xf hyperfine-v1.12.0-x86_64-unknown-linux-musl.tar.gz
      cp hyperfine-v1.12.0-x86_64-unknown-linux-musl/hyperfine ~/.local/bin
      # TODO what to do with the autocomplete files?
      rm -fr hyperfine-v1.12.0-x86_64-unknown-linux-musl
   )

   # [vifm – Vim-like file manager](https://github.com/vifm/vifm).
   which --skip-alias vifm \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget -O vifm.tar.gz 'https://github.com/vifm/vifm/archive/refs/tags/v0.12.tar.gz'
      tar xf vifm.tar.gz
      cd vifm-0.12/
      ./configure --prefix=$HOME/.local
      make -j $(nproc) install
   )

   # [pv - GitHub](https://github.com/a-j-wood/pv):
   # a terminal-based tool for monitoring the progress of data through a
   # pipeline.
   which --skip-alias pv \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      wget http://www.ivarch.com/programs/sources/pv-1.6.20.tar.bz2
      tar xf pv-1.6.20.tar.bz2
      cd pv-1.6.20/
      ./configure --prefix=$HOME/.local
      \make -j $(nproc) install
   )
}



function install_cli_tools_optional {
    # [The Platinum Searcher(pt) - GitHub](https://github.com/monochromegane/the_platinum_searcher): A code search tool similar to ack and the_silver_searcher(ag). It supports multi platforms and multi encodings.

    # [The Silver Searcher(ag) - GitHub](https://github.com/ggreer/the_silver_searcher): A code searching tool similar to ack, with a focus on speed.

    # Looks unmaintained.
    # [ack 2 - GitHub](https://github.com/beyondgrep/ack2): ack is a code-searching tool, similar to grep but optimized for programmers searching large trees of source code. It runs in pure Perl, is highly portable, and runs on any platform that runs Perl.
    return
}



function plot_tools {
   # [histogram.py - GitHub](https://github.com/bitly/data_hacks): Command line utilities for data analysis.
   python3 -m pip install --user --upgrade data_hacks

   # [Termgraph - GitHub](https://github.com/mkaz/termgraph) A command-line tool that draws basic graphs in the terminal, written in Python.
   # [Termgraph – How To Draw basic graphs on Linux terminal - Blog](https://computingforgeeks.com/termgraph-command-line-tool-draw-graphs-in-terminal-linux/).
   python3 -m pip install --user --upgrade termgraph

   # [termeter - GitHub](https://github.com/atsaki/termeter) Visualize data in the terminal.
   go install github.com/atsaki/termeter/cmd/termeter@latest \
   && mv ~/go/bin/termeter ~/.local/bin

   # [asciigraph - GitHub](https://github.com/guptarohit/asciigraph) Go package to make lightweight ASCII line graphs ╭┈╯.
   go install github.com/guptarohit/asciigraph/cmd/asciigraph@latest \
   && mv ~/go/bin/asciigraph ~/.local/bin

   # [pysparkline - GitHub](https://github.com/RedKrieg/pysparklines) Takes series data via stdin, command line, or API and prints a sparkline representation.
   #python3 -m pip install --user --upgrade pysparklines

   # [plotext - GitHub](https://github.com/piccolomo/plotext) plots directly on terminal, it has no dependencies and the syntax is very similar to matplotlib. It also provide a simple command line tool.
   # Doesn't seem to have a CLI.
   #python3 -m pip install --user --upgrade plotext

   # [ttyplot - GitHub](https://github.com/tenox7/ttyplot) a realtime plotting utility for text mode consoles and terminals with data input from stdin / pipe.
   # Needs to be compiled

   # [termplotlib - GitHub](https://github.com/nschloe/termplotlib) termplotlib is a Python library for all your terminal plotting needs. It aims to work like matplotlib.
   #python3 -m pip install --user --upgrade termplotlib

   # [bashplotlib - GitHub](https://github.com/glamp/bashplotlib) plotting in the terminal.
   #python3 -m pip install --user --upgrade bashplotlib

   # [smag - show me a graph! - GitHub](https://github.com/aantn/smag) Easily create graphs from cli commands and view them in the terminal. Like the watch command but with a graph of the output.
   #cargo install --git https://github.com/aantn/smag

   # [Pipe Plot - GitHub](https://github.com/MyGodIsHe/pipeplot) pipeplot draws an interactive graph in a terminal based on data from pipe.
   #python3 -m pip install --user --upgrade pipeplot

   # [Plotille - GitHub](https://github.com/tammoippen/plotille) Plot, scatter plots and histograms in the terminal using braille dots, with (almost) no dependancies. Plot with color or make complex figures - similar to a very small sibling to matplotlib. Or use the canvas to plot dots and lines yourself.
   # Library Only?
   #python3 -m pip install --user --upgrade plotille

   # [feedgnuplot - GitHub](https://github.com/dkogan/feedgnuplot) This is a flexible, command-line-oriented frontend to Gnuplot.
   #git clone https://github.com/dkogan/feedgnuplot.git
   #cd feedgnuplot
   #perl Makefile.PL prefix=~/.local
   #\make install
}



function install_other_shells {
   # [xonsh](https://xon.sh/)
   # XONSH is a Python-powered shell
   python3 -m pip install --user --upgrade 'xonsh[full]'
}



# On trixie, do:
# module load StdEnv/2020
# module load rust/1.53.0

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
   install_configs
   install_vim_plugins
   install_tmux_plugins
   extend_bashrc
   install_python_tools
   install_go_tools
   install_rust_tools
   install_bash_tools
   install_perl_tools
   install_compiled_tools
   install_other_shells
fi
