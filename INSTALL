# vim:nowrap:
#####################################
# Fonts
# [Nerd Fonts](https://www.nerdfonts.com)
# [Programming Fonts](https://www.programmingfonts.org)

# [Command Line](https://www.reddit.com/r/commandline/)
# [A list of new(ish) command line tools](https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/)



function extend_bashrc {
   cat >> $HOME/.bashrc <<EOL


# User specific aliases and functions
[[ -e ~/.alias ]] && . ~/.alias || true
[[ -e ~/.bashrc.common ]] && . ~/.bashrc.common || true
[[ -e ~/.bashrc.specific ]] && . ~/.bashrc.specific || true
[[ -d ~/.bash_completion.d ]] && for f in ~/.bash_completion.d/*; do [[ -f "\$f" ]] && source \$f; done || true
EOL
}



function install_configs {
   local -ar configs=(
     alias
     bashrc.common
     gdbinit
     gitconfig
     gitignore_global
     gotz.config.json
     inputrc
     screenrc
     tmux.conf
     toprc
     vimrc
   )

   for config in ${configs[@]}; do
      ln -fns ~/config/$config  ~/.$config
   done

   mkdir -p ~/.config/htop
   ln -fns ~/config/htoprc ~/.config/htop/

   ln -fns ~/config/flake8 ~/.config/flake8

   mkdir -p ~/.cargo
   ln -fns ~/config/cargo.config.toml ~/.cargo/config.toml

   mkdir -p ~/.local/bin
   cp ~/config/bin/ipynb_drop_output.py ~/.local/bin/
}



function install_bash_completion {
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/damienfrancois/slurm-helper/master/{slurm_completion.sh}' \
      -o ~/.bash_completion.d/'#1'
}



function install_vim_plugins {
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/SchedMD/slurm/master/contribs/slurm_completion_help/{slurm.vim}' \
      -o ~/.vim/after/syntax/sh/'#1'

   #git \
   #   clone \
   #   https://github.com/VundleVim/Vundle.vim.git \
   #   $HOME/.vim/bundle/Vundle.vim \
   #|| ( cd $HOME/.vim/bundle/Vundle.vim && git pull; )
   #vim +:PluginInstall +:PluginUpdate +:qa

   curl \
      -fLo ~/.vim/autoload/plug.vim \
      --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

   vim +:PlugInstall +:PlugUpdate "+:CocInstall coc-json" "+:CocInstall coc-yaml" "+:CocInstall coc-jedi" +:qall
}



function install_tmux_plugins {
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/{tmux}' \
      -o ~/.bash_completion.d/'#1'

   git \
      clone \
      https://github.com/tmux-plugins/tpm \
      $HOME/.tmux/plugins/tpm \
   || ( cd $HOME/.tmux/plugins/tpm && git pull; )
}



function install_python_tools {
   # [tabulate - python-tabulate - GitHub](https://github.com/astanin/python-tabulate):
   # Pretty-print tabular data in Python, a library and a command-line utility.
   python3 -m pip install --user --upgrade tabulate

   # [tqdm - GitHub](https://github.com/tqdm/tqdm):
   # Progress Bar.
   python3 -m pip install --user --upgrade tqdm

   # [histogram.py - GitHub](https://github.com/bitly/data_hacks):
   # Command line utilities for data analysis.
   #python3 -m pip install --user --upgrade data_hacks   # Only works with python2
   python3 -m pip install --user --upgrade data_hacks3

   # [bpytop - GitHub](https://github.com/aristocratos/bpytop)
   python3 -m pip install --user bpytop

   # [glances - GitHub](https://github.com/nicolargo/glances)
   # [glances - WebSite](https://nicolargo.github.io/glances):
   # An eye on your system.
   python3 -m pip install --user --upgrade glances

   # [tmuxp - GitHub](https://github.com/tmux-python/tmuxp):
   # tmuxp, tmux session manager.
   python3 -m pip install --user --upgrade tmuxp

   # [tldr-pages - GitHub](https://github.com/tldr-pages/tldr):
   # The tldr-pages project is a collection of community-maintained help pages
   # for command-line tools, that aims to be a simpler, more approachable
   # complement to traditional man pages.
   python3 -m pip install --user --upgrade tldr

   # [Rich CLI - GitHub](https://github.com/Textualize/rich-cli):
   # Rich-cli is a command line toolbox for fancy output in the terminal, built
   # with Rich.  Use the rich command to highlight a variety of file types in
   # the terminal, with specialized rendering for Markdown and JSON files.
   # Additionally you can markup and format text from the command line.
   python3 -m pip install --user --upgrade rich-cli

   # [xq - GitHub](https://github.com/jeffbr13/xq):
   # Apply XPath expressions to XML, like jq does for JSONPath and JSON.
   python3 -m pip install --user --upgrade xq

   # [hq - GitHub](https://github.com/rbwinslow/hq):
   # Powerful HTML slicing and dicing at the command line.
   python3 -m pip install --user --upgrade hq

   # [yq - GitHub](https://github.com/kislyuk/yq):
   # yq: Command-line YAML/XML/TOML processor - jq wrapper for YAML, XML, TOML documents.
   python3 -m pip install --user --upgrade yq

   # [scroll - GitHub](https://github.com/redraw/scroll)
   # scroll stdout!
   python3 -m pip install --user --upgrade scroll-term

   # [hapless - GitHub](https://github.com/bmwant/hapless)
   # Simplest way of running and tracking processes in the background.
   python3 -m pip install --user --upgrade hapless
}



function install_fzf {
   # [fzf - GitHub](https://github.com/junegunn/fzf):
   # fzf is a general-purpose.  command-line fuzzy finder
   go install github.com/junegunn/fzf@latest \
   && mv ~/go/bin/fzf ~/.local/bin/

   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/junegunn/fzf/master/bin/{fzf-tmux}' \
      -o ~/.local/bin/'#1' \
   && chmod u+x ~/.local/bin/fzf-tmux

   # [forgit - GitHub](https://github.com/wfxr/forgit):
   # A utility tool powered by fzf for using git interactively.
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/wfxr/forgit/master/bin/{git-forgit}' \
      -o ~/.local/bin/'#1' \

   # BASH completions
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/junegunn/fzf/master/shell/{completion.bash}' \
      -o ~/.bash_completion.d/'#1'
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/junegunn/fzf/master/shell/{key-bindings.bash}' \
      -o ~/.bash_completion.d/'#1'
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/junegunn/fzf-git.sh/main/{fzf-git.sh}' \
      -o ~/.bash_completion.d/'#1'

   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/junegunn/fzf/master/shell/{key-bindings.fish}' \
      -o ~/.config/fish/functions/'#1'
}



function install_go_essential {
   mkdir -p ~/.local/bin

   install_fzf

   # [lazygit - GitHub](https://github.com/jesseduffield/lazygit):
   # A simple terminal UI for git commands, written in Go with the gocui
   # library.
   go install github.com/jesseduffield/lazygit@latest \
   && mv ~/go/bin/lazygit ~/.local/bin/

   # [go DiskUsage(gdu) - GitHub](https://github.com/dundee/gdu):
   # Pretty fast disk usage analyzer written in Go.
   go install github.com/dundee/gdu/v5/cmd/gdu@latest \
   && mv ~/go/bin/gdu ~/.local/bin/

   # [Glow - GitHub](https://github.com/charmbracelet/glow):
   # Render markdown on the CLI, with pizzazz!
   go install github.com/charmbracelet/glow@latest \
   && mv ~/go/bin/glow ~/.local/bin/
}



function install_go_extras {
   mkdir -p ~/.local/bin

   # [Miller - GitHub](https://github.com/johnkerl/miller):
   # Miller is like awk, sed, cut, join, and sort for data formats such as CSV,
   # TSV, JSON, JSON Lines, and positionally-indexed.
   #go install github.com/johnkerl/miller@latest \
   #&& mv ~/go/bin/mlr ~/.local/bin/

   # [archiver - GitHub](https://github.com/mholt/archiver)
   # Easily create & extract archives, and compress & decompress files of various formats.
   go install github.com/mholt/archiver/v3/cmd/arc@latest \
   && mv ~/go/bin/arc ~/.local/bin/

   # [lazydocker - GitHub](https://github.com/jesseduffield/lazydocker):
   # A simple terminal UI for both docker and docker-compose, written in Go
   # with the gocui library.
   go install github.com/jesseduffield/lazydocker@latest \
   && mv ~/go/bin/lazydocker ~/.local/bin/

   # [duf - GitHub](https://github.com/muesli/duf):
   # Disk Usage/Free Utility (Linux, BSD, macOS & Windows).
   go install github.com/muesli/duf@latest \
   && mv ~/go/bin/duf ~/.local/bin/

   # [F2 - GitHub](https://github.com/ayoisaiah/f2):
   # F2 is a cross-platform command-line tool for batch renaming files and
   # directories quickly and safely. Written in Go!
   go install github.com/ayoisaiah/f2/cmd/f2@latest \
   && mv ~/go/bin/f2 ~/.local/bin/

   # [yq - gitHub](https://github.com/mikefarah/yq):
   # A lightweight and portable command-line YAML, JSON and XML processor. yq
   # uses jq like syntax but works with yaml files as well as json and xml.
   #go install github.com/mikefarah/yq@latest \
   go get github.com/mikefarah/yq/v4 \
   && mv ~/go/bin/yq ~/.local/bin/

   # [gojq - GitHub](Pure Go implementation of jq):
   # Pure Go implementation of jq.
   # This is an implementation of jq command written in Go language. You can
   # also embed gojq as a library to your Go products.
   go install github.com/itchyny/gojq/cmd/gojq@latest \
   && mv ~/go/bin/gojq ~/.local/bin/

   # [lf - GitHub](https://github.com/gokcehan/lf):
   # lf (as in "list files") is a terminal file manager written in Go with a
   # heavy inspiration from ranger file manager.
   CGO_ENABLED=0  go install -ldflags="-s -w" github.com/gokcehan/lf@latest \
   && mv ~/go/bin/lf ~/.local/bin/

   # [gotz - GitHub](https://github.com/merschformann/gotz):
   # gotz - a simple CLI timezone info tool.
   go install github.com/merschformann/gotz@latest \
   && mv ~/go/bin/gotz ~/.local/bin/
   ln -fns ~/config/gotz.config.json ~/.gotz.config.json

   # [jid - GitHub](https://github.com/simeji/jid)
   # json incremental digger.
   go install github.com/simeji/jid/cmd/jid@latest \
   && mv ~/go/bin/jid ~/.local/bin/

   # [jqp - GitHub](https://github.com/noahgorstein/jqp)
   # A TUI playground to experiment with jq.
   go install github.com/noahgorstein/jqp@latest \
   && mv ~/go/bin/jqp ~/.local/bin/

   # [up - GitHub](https://github.com/akavel/up)
   # Ultimate Plumber is a tool for writing Linux pipes with instant live preview.
   go install github.com/akavel/up@latest \
   && cp ~/go/bin/up ~/.local/bin/

   # [grv - GitHub](https://github.com/rgburke/grv)
   # GRV is a terminal interface for viewing git repositories.
   curl \
      --create-dirs \
      'https://github.com/rgburke/grv/releases/download/v0.3.2/grv_v0.3.2_linux64' \
      -o ~/.local/bin/grv \
   && chmod +x ~/.local/bin/grv
}



function install_go_tools {
   # [go](https://golang.org/): Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.
   # wget 'https://go.dev/dl/go1.19.3.linux-amd64.tar.gz'
   # wget 'https://go.dev/dl/go1.17.5.linux-armv6l.tar.gz'

   # [fzf - GitHub](https://github.com/junegunn/fzf):
   # fzf is a general-purpose.  command-line fuzzy finder
   install_fzf
   install_go_essential
   install_go_extras
}



function install_rust_essential {
   # [lsd (LSDeluxe) - GitHub](https://github.com/Peltoche/lsd):
   # This project is a rewrite of GNU ls with lot of added features like
   # colors, icons, tree-view, more formatting options etc. The project is
   # heavily inspired by the super colorls project.
   cargo install --force --root ~/.local lsd

   # [bat - GitHub](https://github.com/sharkdp/bat):
   # A cat(1) clone with syntax highlighting and Git integration.
   cargo install --force --root ~/.local bat

   # [delta - GitHub](https://github.com/dandavison/delta):
   # A syntax-highlighting pager for git, diff, and grep output
   # ~/.gitconfig
   # [core]
   #     pager = delta
   # 
   # [interactive]
   #     diffFilter = delta --color-only
   # 
   # [delta]
   #     navigate = true  # use n and N to move between diff sections
   # 
   # [merge]
   #     conflictstyle = diff3
   # 
   # [diff]
   #     colorMoved = default
   cargo install --force --root ~/.local --git https://github.com/dandavison/delta

   # NOTE we manually move the compile binary because we want to make sure it
   # is different than the other variants of reservoir_sampling.
   # NOTE that we move the binary because it will conflict with the one in ~/.cargo/bin.
   ##module load rust/1.59.0
   #module load rust
   #cargo install --force --root ~/.local --git https://github.com/SamuelLarkin/reservoir_sampling_rs
   cargo install --force --git https://github.com/SamuelLarkin/reservoir_sampling_rs \
   && mv ~/.cargo/bin/reservoir_sampling_rs ~/.local/bin/reservoir_sampling_rs

   # [jless - GitHub](https://github.com/PaulJuliusMartinez/jless):
   # jless is a command-line JSON viewer. Use it as a replacement for whatever
   # combination of less, jq, cat and your editor you currently use for viewing
   # JSON files. It is written in Rust and can be installed as a single
   # standalone binary.
   # [jless — a command-line JSON viewer](https://jless.io/user-guide.html)
   cargo install --force --root ~/.local jless

   # [hyperfine - GitHub](https://github.com/sharkdp/hyperfine):
   # A command-line benchmarking tool.
   cargo install --force --root ~/.local hyperfine

   # [zoxide - GitHub](https://github.com/ajeetdsouza/zoxide):
   # zoxide is a smarter cd command, inspired by z and autojump.
   # It remembers which directories you use most frequently, so you can "jump"
   # to them in just a few keystrokes.  zoxide works on all major shells.
   cargo install --force --root ~/.local zoxide
   #`eval "$(zoxide init bash)"`

   # [hexyl - GitHub](https://github.com/sharkdp/hexyl):
   # is a simple hex viewer for the terminal. It uses a colored output to
   # distinguish different categories of bytes (NULL bytes, printable ASCII
   # characters, ASCII whitespace characters, other ASCII characters and
   # non-ASCII).
   cargo install --force --root ~/.local hexyl

   # [difftastic - GitHub](https://github.com/Wilfred/difftastic):
   # Difftastic is an experimental diff tool that compares files based on their
   # syntax.
   cargo install --force --root ~/.local difftastic

   # [stybulate - GitHub](https://github.com/guigui64/stybulate)
   # Tabulate with Style
   # module load rust
   cargo install --force --root ~/.local stybulate --features=cli
}



function install_rust_extras {
   # [fd - GitHub](https://github.com/sharkdp/fd):
   # is a program to find entries in your filesystem.
   cargo install --force --root ~/.local fd-find

   # [exa - Documentation](https://the.exa.website/):
   # modern replacement for ls.
   # [exa - GitHub](https://github.com/ogham/exa):
   # modern replacement for ls.
   cargo install --force --root ~/.local exa

   # [zenith - GitHub](https://github.com/bvaisvil/zenith):
   # In terminal graphical metrics for your *nix system written in Rust.
   cargo install --force --root ~/.local --git https://github.com/bvaisvil/zenith

   # [dust: du + rust = dust - GitHub](https://github.com/bootandy/dust):
   # Like du but more intuitive.
   cargo install --force --root ~/.local --git https://github.com/bootandy/dust

   # [bottom - GitHub](https://github.com/cjbassi/ytop):
   # Another TUI based system monitor, this time in Rust
   # NO LONGER MAINTAINED. For a similar program, check out [bottom](https://github.com/ClementTsang/bottom).
   #cargo install --force --git https://github.com/ClementTsang/bottom
   cargo install --force --root ~/.local bottom

   # [procs - GitHub](https://github.com/dalance/procs):
   # is a replacement for ps written in Rust.
   cargo install --force --root ~/.local procs

   # [rg: ripgrep - GitHub](https://github.com/BurntSushi/ripgrep): ripgrep is
   # a line-oriented search tool that recursively searches the current
   # directory for a regex pattern.
   cargo install --force --root ~/.local ripgrep

   # [RnR - GitHub](https://github.com/ismaelgv/rnr):
   # RnR is a command-line tool to securely rename multiple files and
   # directories that supports regular expressions.
   cargo install --force --root ~/.local rnr

   # [runiq - GitHub](https://github.com/whitfin/runiq):
   # This project offers an efficient way (in both time and space) to filter
   # duplicate entries (lines) from texual input.
   cargo install --force --root ~/.local runiq

   # [histo - GitHub](https://github.com/fitzgen/histo)
   # Histograms with a configurable number of buckets, and a terminal-friendly
   # Display.
   cargo install --force --root ~/.local histo

   # [Diskonaut - GitHub](https://github.com/imsnif/diskonaut):
   # windirstat like for the CLI.
   cargo install --force --root ~/.local diskonaut

   # [xsv - GitHub](https://github.com/BurntSushi/xsv):
   # xsv is a command line program for indexing, slicing, analyzing, splitting
   # and joining CSV files. Commands should be simple, fast and composable.
   cargo install --force --root ~/.local xsv

   # [Navi - GitHub](https://github.com/denisidoro/navi):
   # An interactive cheatsheet tool for the command-line.
   cargo install --force --root ~/.local --git https://github.com/denisidoro/navi

   # [vivid - GitHub](https://github.com/sharkdp/vivid):
   # vivid is a generator for the LS_COLORS environment variable that controls
   # the colorized output of ls, tree, fd, bfs, dust and many other tools.
   cargo install --force --root ~/.local vivid

   # [Erdtree - GitHub](https://github.com/solidiquis/erdtree):
   # A bLazInGlY fAsT, simplified version of the ancient tree command which
   # displays a colorful depth indented listing of files with their memory
   # sizes adjacent.
   cargo install --force --root ~/.local --git https://github.com/solidiquis/erdtree

   # [oxker - GitHub](https://github.com/mrjackwills/oxker):
   # A simple tui to view & control docker containers.
   cargo install --force --root ~/.local --git https://github.com/mrjackwills/oxker

   # [termscp - GitHub](https://github.com/veeso/termscp):
   # A feature rich terminal UI file transfer and explorer with support for
   # SCP/SFTP/FTP/S3.
   cargo install --force --root ~/.local termscp

   # [zellij](https://github.com/zellij-org/zellij):
   # A terminal workspace with batteries included.
   #module load rust/1.59.0
   cargo install --force --root ~/.local zellij

   # [htmlq - GitHub](https://github.com/mgdm/htmlq)
   # Like jq, but for HTML. Uses CSS selectors to extract bits of content from HTML files.
   cargo install --force --root ~/.local htmlq

   # [broot - GitHub](https://github.com/Canop/broot)
   # A new way to see and navigate directory trees : https://dystroy.org/broot
   cargo install --force --root ~/.local broot

   # [fu - GitHub](https://github.com/pierrechevalier83/find_unicode)
   # Find Unicode characters the easy way: from the command line.
   cargo install --force --root ~/.local find_unicode

   # [gitui - GitHub](https://github.com/extrawurst/gitui)
   # Blazing 💥 fast terminal-ui for git written in rust 🦀.
   cargo install --force --root ~/.local gitui

   # [ouch - GitHub](https://github.com/ouch-org/ouch)
   # Painless compression and decompression for your terminal.
   # module load rust
   # module load gcc/11.3.0
   cargo install --force --root ~/.local ouch

   # [skim - GitHub](https://github.com/lotabout/skim#installation)
   # Fuzzy Finder in rust!
   # A la `fzf`.
   # module load rust
   cargo install --force --root ~/.local skim
}



function install_rust_tools {
   # [Rust](https://www.rust-lang.org/):
   # A language empowering everyone to build reliable and efficient software.
   # curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
   # NOTE to install a specific version from git use `--tag X`
   # cargo install --force --root ~/.local --git https://github.com/bvaisvil/zenith  --tag 0.12.0

   #cargo install \
   #   --force \
   #   --root ~/.local \
   #   lsd bat hyperfine exa bottom procs fd-find ripgrep rnr histo diskonaut zoxide hexyl difftastic jless xsv vivid

   #cargo install \
   #   --force \
   #   --root ~/.local \
   #   --git https://github.com/dandavison/delta

   #cargo install \
   #   --force \
   #   --root ~/.local \
   #   --git https://github.com/bvaisvil/zenith

   install_rust_essential
   install_rust_extras

   #####################################
   # UNDER TESTING

   # [starship - GitHub](https://github.com/starship/starship)
   # ☄🌌️ The minimal, blazing-fast, and infinitely customizable prompt for any shell!
   # eval "$(starship init bash)"
   cargo install --force --root ~/.local starship

   # [atuin](https://github.com/atuinsh/atuin)
   # ✨ Magical shell history.
   cargo install --force --root ~/.local atuin
}



function install_bashdb {
   # [bashdb - SourceForge](https://bashdb.sourceforge.net/)
   # The Bash Debugger Project is a source-code debugger for bash that follows
   # the gdb command syntax.
   mkdir -p ~/tmp && cd ~/tmp
   wget -O bashdb-5.0-1.1.2.tar.bz2 'https://sourceforge.net/projects/bashdb/files/bashdb/5.0-1.1.2/bashdb-5.0-1.1.2.tar.bz2/download'
   tar xf bashdb-5.0-1.1.2.tar.bz2
   cd bashdb-5.0-1.1.2/
   ./configure --prefix=$HOME/.local
   \make install
   rm -fr bashdb-5.0-1.1.2/
}



function install_bash_tools {
   # [bashdb - SourceForge](https://bashdb.sourceforge.net/)
   # The Bash Debugger Project is a source-code debugger for bash that follows
   # the gdb command syntax.
   install_bashdb
}



function install_perl_tools {
   # [rename - Cpan File::Rename](https://metacpan.org/dist/File-Rename/view/rename.PL).
   cpan install File::Rename
}



function install_gh {
   # [Install from Source](https://github.com/cli/cli/blob/trunk/docs/source.md)
   mkdir -p ~/git && cd ~/git
   git clone https://github.com/cli/cli.git gh-cli
   cd gh-cli
   \make install prefix=$HOME/.local
}



function install_tig {
   local -r config_dir=~/.config/tig
   local -r version=2.5.8

   mkdir -p ~/tmp && cd ~/tmp
   wget "https://github.com/jonas/tig/releases/download/tig-$version/tig-$version.tar.gz"
   tar xf tig-$version.tar.gz
   cd tig-$version \
   && {
      ./autogen.sh
      ./configure --prefix=$HOME/.local
      \make -j $(nproc) install
      mkdir -p ~/.bash_completion.d/
      cp contrib/tig-completion.bash ~/.bash_completion.d/
      mkdir -p $config_dir
      cp contrib/chocolate.theme.tigrc $config_dir
      cd ..
      rm -fr tig-$version
      curl -o $config_dir/"#1" "https://raw.githubusercontent.com/h3xx/tig-colors-neonwolf/main/{tig-colors-neonwolf-256.tigrc}"
   }
}



function install_jq {
   # [jq](https://stedolan.github.io/jq/): jq is a lightweight and flexible command-line JSON processor.
   # [jq](https://github.com/stedolan/jq): jq is a lightweight and flexible command-line JSON processor.
   which --skip-alias jq && return

   curl \
      --create-dirs \
      'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64' \
      -o "$HOME/.local/bin/jq" \
   && chmod u+x $HOME/.local/bin/jq

   #which --skip-alias jq \
   #|| (
   #   readonly version=1.6
   #   mkdir -p ~/tmp && cd ~/tmp
   #   wget "https://github.com/stedolan/jq/archive/refs/tags/jq-$version.tar.gz"
   #   cd jq-jq-$version
   #   autoreconf -fi
   #   ./configure --with-oniguruma=builtin --prefix=$HOME/.local
   #   \make -j $(nproc) LDFLAGS=-all-static
   #   cd ..
   #   rm -fr jq-jq-$version
   #)
}



function install_compiled_essential {
   # [tig - GitHub](https:://github.com/jonas/tig): text-mode interface for Git.
   which --skip-alias tig || install_tig

   # [jq](https://stedolan.github.io/jq/): jq is a lightweight and flexible command-line JSON processor.
   # [jq](https://github.com/stedolan/jq): jq is a lightweight and flexible command-line JSON processor.
   which --skip-alias jq || install_jq

   # [htop - GitHub](https://github.com/htop-dev/htop): is a cross-platform
   # interactive process viewer.
   which --skip-alias htop \
   || (
      readonly version=3.1.1
      mkdir -p ~/tmp && cd ~/tmp
      wget -O "htop-$version.tar.gz" "https://github.com/htop-dev/htop/archive/refs/tags/$version.tar.gz"
      tar xf htop-$version.tar.gz
      cd htop-$version
      ./autogen.sh
      ./configure --prefix=$HOME/.local
      \make -j $(nproc) install
      cd ..
      rm -fr htop-$version
   )

   # [ug/ugrep - GitHub](https://github.com/Genivia/ugrep): Search for anything
   # in everything... ultra fast.
   which --skip-alias ugrep \
   || (
      readonly version=4.0.5
      mkdir -p ~/tmp && cd ~/tmp
      wget -O "ugrep-$version.tar.gz" "https://github.com/Genivia/ugrep/archive/refs/tags/v$version.tar.gz"
      tar xf ugrep-$version.tar.gz
      cd ugrep-$version
      ./configure --prefix=$HOME/.local --without-zstd
      \make -j $(nproc) install
      cd .. && rm -fr ugrep-$version
   )

   # [parallel - GNU parallel](https://www.gnu.org/software/parallel/): is a shell tool
   # for executing jobs in parallel using one or more computers.
   which --skip-alias parallel \
   || (
      readonly version=20231022
      mkdir -p ~/tmp && cd ~/tmp
      wget "https://ftp.gnu.org/gnu/parallel/parallel-$version.tar.bz2"
      tar xf parallel-$version.tar.bz2
      cd parallel-$version
      ./configure --prefix=$HOME/.local
      \make -j $(nproc) install
      cd ..
      rm -fr parallel-$version
   )

   # [hyperfine - GitHub](https://github.com/sharkdp/hyperfine): A command-line benchmarking tool.
   # NOTE: probably already install by `cargo install hyperfine`.
   which --skip-alias hyperfine \
   || (
      readonly version=1.12.0
      mkdir -p ~/tmp && cd ~/tmp
      wget "https://github.com/sharkdp/hyperfine/releases/download/v$version/hyperfine-v$version-x86_64-unknown-linux-musl.tar.gz"
      tar xf hyperfine-v$version-x86_64-unknown-linux-musl.tar.gz
      cp hyperfine-v$version-x86_64-unknown-linux-musl/hyperfine ~/.local/bin/
      # TODO what to do with the autocomplete files?
      rm -fr hyperfine-v$version-x86_64-unknown-linux-musl
   )

}



function install_compiled_extras {
   # [ncdu](https://dev.yorhel.nl/ncdu): NCurses Disk Usage.
   which --skip-alias ncdu \
   || (
      readonly version=1.16
      mkdir -p ~/tmp && cd ~/tmp
      wget --no-check-certificate "https://dev.yorhel.nl/download/ncdu-$version.tar.gz"
      tar xf ncdu-$version.tar.gz
      cd ncdu-$version
      ./configure --prefix=$HOME/.local
      \make -j $(nproc) install
      cd ..
      rm -fr ncdu-$version
   )
}



function install_compiled_tools {
   # tmux

   install_compiled_essential
   install_compiled_extras

   #####################################
   # UNDER TESTING

   # [duf - GitHub](https://github.com/muesli/duf: Disk Usage/Free Utility (Linux, BSD, macOS & Windows)).
   which --skip-alias duf \
   || (
      mkdir -p ~/tmp && cd ~/tmp
      git clone https://github.com/muesli/duf.git
      cd duf
      go build
      install --mode=u=rx duf $HOME/.local/bin/
      cd .. && rm -fr duf
   )

   # [vifm – Vim-like file manager](https://github.com/vifm/vifm).
   which --skip-alias vifm \
   || (
      readonly version=0.12
      mkdir -p ~/tmp && cd ~/tmp
      wget -O vifm.tar.gz "https://github.com/vifm/vifm/archive/refs/tags/v$version.tar.gz"
      tar xf vifm.tar.gz
      cd vifm-$version/
      ./configure --prefix=$HOME/.local
      \make -j $(nproc) install
      cd ..
      rm -fr vifm-$version/
   )

   # [pv - GitHub](https://github.com/a-j-wood/pv):
   # a terminal-based tool for monitoring the progress of data through a
   # pipeline.
   which --skip-alias pv \
   || (
      readonly version=1.6.20
      mkdir -p ~/tmp && cd ~/tmp
      wget "http://www.ivarch.com/programs/sources/pv-$version.tar.bz2"
      tar xf pv-$version.tar.bz2
      cd pv-$version/
      ./configure --prefix=$HOME/.local
      \make -j $(nproc) install
      cd ..
      rm -fr pv-$version/
   )

   # [neovim - gitHub](https://github.com/neovim/neovim/wiki/Installing-Neovim#install-from-source)
   # Vim-fork focused on extensibility and usability.
   which --skip-alias neovim \
   || (
      readonly version=v0.9.4
      mkdir -p ~/git && cd ~/git
      git clone --branch $version https://github.com/neovim/neovim.git
      cd neovim/
      \make CMAKE_BUILD_TYPE=RelWithDebInfo
      \make install CMAKE_INSTALL_PREFIX=~/.local
   )

   # [LunarVim - GitHub](https://github.com/LunarVim/LunarVim)
   # 🌙 LunarVim is an IDE layer for Neovim. Completely free and community driven.
   LV_BRANCH='release-1.2/neovim-0.8' \
   bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)

   # [Helix](https://helix-editor.com/)
   # [Helix - GitHub](https://github.com/helix-editor/helix)
   # A post-modern text editor.
   (
     mkdir -p ~/git && cd ~/git
     git clone https://github.com/helix-editor/helix
     cd helix
     cargo install --force --root ~/.local  --path helix-term
   )

   # [jo - GitHub](https://github.com/jpmens/jo)
   # JSON output from a shell.
   (
      readonly version=1.9
      mkdir -p ~/tmp && cd ~/tmp
      wget "https://github.com/jpmens/jo/releases/download/$version/jo-$version.tar.gz"
      tar xf jo-$version.tar.gz
      cd jo-$version
      autoreconf -i
      ./configure
      \make check
      \make DESTDIR=$HOME/.local install
      cd ..
      rm -fr jo-$version
   )

   # [ctags](https://github.com/universal-ctags/ctags)
   # A maintained ctags implementation
   which --skip-alias ctags \
   || (
      #https://github.com/universal-ctags/ctags/releases/download/v6.0.0/universal-ctags-6.0.0.tar.gz
      mkdir -p ~/git && cd ~/git
      git clone --branch=v6.0.0 https://github.com/universal-ctags/ctags.git
      cd ctags
      ./autogen.sh
      # Has to be $HOME and not ~
      ./configure --prefix=$HOME/.local
      \make -j $(nproc)
      \make -j $(nproc) install
   )

   # [Node.js](https://nodejs.org/en)
   # Node.js® is an open-source, cross-platform JavaScript runtime environment.
   which --skip-alias npm \
   (
      version="v21.1.0"
      mkdir -p ~/tmp && cd ~/tmp
      wget "https://nodejs.org/dist/$version/node-$version.tar.gz"
      tar xf node-$version.tar.gz
      cd node-$version/
      ./configure --prefix=$HOME/.local
      \make -j $(nproc)
      \make -j $(nproc) install
      cd ..
      rm -fr node-$version
   )
}



function install_cli_tools_optional {
    # [The Platinum Searcher(pt) - GitHub](https://github.com/monochromegane/the_platinum_searcher): A code search tool similar to ack and the_silver_searcher(ag). It supports multi platforms and multi encodings.

    # [The Silver Searcher(ag) - GitHub](https://github.com/ggreer/the_silver_searcher): A code searching tool similar to ack, with a focus on speed.

    # Looks unmaintained.
    # [ack 2 - GitHub](https://github.com/beyondgrep/ack2): ack is a code-searching tool, similar to grep but optimized for programmers searching large trees of source code. It runs in pure Perl, is highly portable, and runs on any platform that runs Perl.
    return
}



function plot_tools {
   # [histogram.py - GitHub](https://github.com/bitly/data_hacks): Command line utilities for data analysis.
   python3 -m pip install --user --upgrade data_hacks

   # [Termgraph - GitHub](https://github.com/mkaz/termgraph): A command-line tool that draws basic graphs in the terminal, written in Python.
   # [Termgraph – How To Draw basic graphs on Linux terminal - Blog](https://computingforgeeks.com/termgraph-command-line-tool-draw-graphs-in-terminal-linux/).
   python3 -m pip install --user --upgrade termgraph

   # [termeter - GitHub](https://github.com/atsaki/termeter): Visualize data in the terminal.
   go install github.com/atsaki/termeter/cmd/termeter@latest \
   && mv ~/go/bin/termeter ~/.local/bin/

   # [asciigraph - GitHub](https://github.com/guptarohit/asciigraph): Go package to make lightweight ASCII line graphs ╭┈╯.
   go install github.com/guptarohit/asciigraph/cmd/asciigraph@latest \
   && mv ~/go/bin/asciigraph ~/.local/bin/

   # [pysparkline - GitHub](https://github.com/RedKrieg/pysparklines): Takes series data via stdin, command line, or API and prints a sparkline representation.
   #python3 -m pip install --user --upgrade pysparklines

   # [plotext - GitHub](https://github.com/piccolomo/plotext): plots directly on terminal, it has no dependencies and the syntax is very similar to matplotlib. It also provide a simple command line tool.
   # Doesn't seem to have a CLI.
   #python3 -m pip install --user --upgrade plotext

   # [ttyplot - GitHub](https://github.com/tenox7/ttyplot): a realtime plotting utility for text mode consoles and terminals with data input from stdin / pipe.
   # Needs to be compiled

   # [termplotlib - GitHub](https://github.com/nschloe/termplotlib): termplotlib is a Python library for all your terminal plotting needs. It aims to work like matplotlib.
   #python3 -m pip install --user --upgrade termplotlib

   # [bashplotlib - GitHub](https://github.com/glamp/bashplotlib): plotting in the terminal.
   #python3 -m pip install --user --upgrade bashplotlib

   # [smag - show me a graph! - GitHub](https://github.com/aantn/smag): Easily create graphs from cli commands and view them in the terminal. Like the watch command but with a graph of the output.
   #cargo install --force --git https://github.com/aantn/smag

   # [Pipe Plot - GitHub](https://github.com/MyGodIsHe/pipeplot): pipeplot draws an interactive graph in a terminal based on data from pipe.
   #python3 -m pip install --user --upgrade pipeplot

   # [Plotille - GitHub](https://github.com/tammoippen/plotille): Plot, scatter plots and histograms in the terminal using braille dots, with (almost) no dependancies. Plot with color or make complex figures - similar to a very small sibling to matplotlib. Or use the canvas to plot dots and lines yourself.
   # Library Only?
   #python3 -m pip install --user --upgrade plotille

   # [feedgnuplot - GitHub](https://github.com/dkogan/feedgnuplot): This is a flexible, command-line-oriented frontend to Gnuplot.
   #git clone https://github.com/dkogan/feedgnuplot.git
   #cd feedgnuplot
   #perl Makefile.PL prefix=~/.local
   #\make install
}



function install_other_shells {
   # [FishShell](https://fishshell.com/): Finally, a command line shell for the
   # 90s fish is a smart and user-friendly command line shell for Linux, macOS,
   # and the rest of the family.
   # [fish - GitHub](https://github.com/fish-shell/fish-shell/): the friendly interactive shell.
   which --skip-alias fish \
   || (
      readonly version=3.3.1
      mkdir -p ~/tmp && cd ~/tmp
      wget "https://github.com/fish-shell/fish-shell/releases/download/$version/fish-$version.tar.xz"
      tar xf fish-$version.tar.xz
      cd fish-$version
      mkdir -p build && cd build
      cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local ..
      \make -j $(nproc) insall
      cd ../.. && rm -fr fish-$version
   )

   # [xonsh](https://xon.sh/)
   # XONSH is a Python-powered shell
   python3 -m pip install --user --upgrade 'xonsh[full]'

   # [elvish - GitHub](https://github.com/elves/elvish)
   # Elvish = Expressive Programming Language + Versatile Interactive Shell
   go install src.elv.sh/cmd/elvish@latest \
   && mv ~/go/bin/elvish ~/.local/bin/

   # [nushell - GitHub](https://github.com/nushell/nushell)
   # A new type of shell.
   #cargo install --force --root ~/.local --git https://github.com/nushell/nushell
   cargo install --force --root ~/.local nu
}



function install_profiler {
   # [6 stellar libraries for profiling Python code](https://www.infoworld.com/article/3600993/6-stellar-libraries-for-profiling-python-code.html)

   # [py-spy](https://github.com/benfred/py-spy)
   # py-spy: Sampling profiler for Python programs
   # py-spy top -- python myprogram.py
   python3 -m pip install --user --upgrade py-spy

   # [Pyinstrument](https://github.com/joerick/pyinstrument)
   # Pyinstrument is a Python profiler.
   python3 -m pip install --user --upgrade pyinstrument
}



function install_git_tools {
   # NOTE `wget` doesn't override if exists

   # [git-filter-repo - GitHub](https://github.com/newren/git-filter-repo): Quickly rewrite git repository history (filter-branch replacement)
   curl \
      --create-dirs \
      "https://raw.githubusercontent.com/newren/git-filter-repo/main/{git-filter-repo}" \
      -o ~/.local/bin/'#1' \
   && chmod u+x ~/.local/bin/git-filter-repo

   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/git/git/master/contrib/completion/{git-completion.bash}' \
      -o ~/.bash_completion.d/'#1'
   curl \
      --create-dirs \
      'https://raw.githubusercontent.com/git/git/master/contrib/completion/{git-prompt.sh}' \
      -o ~/.bash_completion.d/'#1'
}



# On trixie, do:
# module load StdEnv/2020
# module load rust

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
   install_configs
   install_bash_completion
   install_vim_plugins
   install_tmux_plugins
   extend_bashrc
   install_python_tools
   install_go_tools
   install_rust_tools
   install_bash_tools
   install_perl_tools
   install_compiled_tools
   install_other_shells
   install_git_tools
fi
